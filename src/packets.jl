#  BLE characteristics
#  ADVERTISING_SERVICE_UUID = "4488B571-7806-4DF6-BCFF-A2897E4953FF"
#  DATA_TRANSFER_SERVICE_UUID = "6E400001-B5A3-F393-E0A9-E50E24DCCA9E"
#  DATA_TRANSFER_CHARACTERISTIC = "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"

function to_full_color(holdData::UInt8)
    fullColor = Int[0, 0, 0]
    fullColor[3] = round(((holdData & 0b00000011) >> 0) / 3 * 255);
    fullColor[2] = round(((holdData & 0b00011100) >> 2) / 7 * 255);
    fullColor[1] = round(((holdData & 0b11100000) >> 5) / 7 * 255);
    return fullColor
end

function reduce_color(color::String)

    b =  round(Int, parse(UInt8, color[5:6], base= 16) /255 * 3)
    g =  round(Int, parse(UInt8, color[3:4], base= 16) /255 * 7)
    r =  round(Int, parse(UInt8, color[1:2], base= 16) /255 * 7)
    @show r,g,b 
    rgb = string(r, base = 2, pad = 3) * string(g, base = 2, pad = 3) * string(b, base = 2, pad = 2)
    @show rgb
    return parse(Int, rgb, base = 2)
end

function checksum(list::Array{Int}) 
    i = 0;
    for intValue in list
        i = (i + intValue) & 255;
    end

    return (~i) & 255;
end

function climb_to_packet(frames::String, KB::Board)
    red = parse.(Int, split(frames, ['p', 'r'], keepempty=false))
    return packet([KB.frame_to_position[x] for x in red[1:2:end]],  [KB.led_to_color[x] for x in red[2:2:end]])
end

function packet(frames::Vector{Int}, colors::Vector{String})
    n = length(frames)
    max_size = 80

    if n < max_size # size < 255
        return [packet(frames, colors, 84)]
    else
        k = ceil(Int, n/max_size)
        s = ceil(Int, n/k)
        p = [packet(frames[1:s], colors[1:s], 82)]

        for i in 1:k-2
            push!(p, packet(frames[1+i*s:(i+1)*s], colors[1+i*s:(i+1)*s], 81))
        end

        push!(p, packet(frames[1+(k-1)*s:end], colors[1+(k-1)*s:end], 83))

        return p
    end
end

function packet(frames::Vector{Int}, colors::Vector{String}, type::Int)
    # packet
    # 1[size][checksum]2[data]3

        # size 
        # length(data)

        # checksum
        # see function checksum(data)

        # data
        # [type][hold][color][hold][color]...[hold][color]

            # type (8 bit)
            # first 82, middle 81, last 83, only 84

            # hold (16 bit) (lower end position, upper end position)

            # color (8 bit) (3r 2b 3g)

    n = length(frames)
    p = Int[]
    push!(p, 1)
    push!(p, 1 + 3*n)
    push!(p, 0) # placeholder
    push!(p, 2)
    push!(p, type) 

    for k in 1:n
        f = frames[k]
        fs = string(f, base = 2, pad = 16)
        push!(p, parse(Int, fs[9:16], base = 2))
        push!(p, parse(Int, fs[1:8], base = 2))
        push!(p, reduce_color(colors[k]))
    end

    p[3] = checksum(p[5:end])
    push!(p, 3)

    return bytes2hex(UInt8.(p))
end

#f = [l for l in keys(KB.frame_to_position)]
#c = [bytes2hex(rand(UInt8, 3)) for _ in f]
#p = packet(f[1:10], c[1:10], 84)
# lost in the sauce
# frames = "p1075r15p1169r12p1233r13p1235r13p1287r13p1325r13p1375r13p1395r14p1521r15"

# packet
#      1  28   4  2  84   5  0  244  87 1  28  235  0  31   30  1  31 59  1  31 164  1  31 120  1  31  220  1  227  135  0  244  3 "
# p = [1, 28, 124, 2, 84, 5, 0, 244, 87, 1, 20, 235, 0, 31, 30, 1, 31, 59, 1, 31, 164, 1, 31, 120, 1, 31, 220, 1, 115, 135, 0, 244, 3]
# p = [1, 28, 12, 2, 84,  5, 0, 244, 87, 1, 20, 235, 0, 31, 30, 1, 31, 59, 1, 31, 164, 1, 31, 120, 1, 31, 220, 1, 227, 135, 0, 244, 3]
# p = [1, 28, 12, 2, 84, 5, 0, 244, 87, 1, 20, 235, 0, 31, 30, 1, 31, 59, 1, 31, 164, 1, 31, 120, 1, 31, 220, 1, 227, 135, 0, 244, 3]


# In Frames; needs to go through frame_to_position
# E: selection = [1316, 1299, 1282, 1265, 1248, 1231, 1214, 1197, 1180, 1181, 1183, 1184, 1182, 1185, 1266, 1267, 1268, 1333, 1334, 1335, 1336, 1338, 1337, 1249, 1250, 1251, 1332, 1281, 1298, 1315, 1264, 1247, 1230, 1213, 1530, 1548, 1566, 1584, 1349, 1350, 1594, 1352, 1351, 1595, 1353, 1354, 1596, 1355, 1196, 1512, 1179, 1162, 1504, 1163, 1164, 1165, 1505, 1166, 1167, 1168, 1506]

# heart: selection = [1285, 1568, 1303, 1578, 1321, 1587, 1339, 1340, 1341, 1342, 1589, 1326, 1309, 1292, 1275, 1553, 1257, 1544, 1534, 1221, 1203, 1515, 1185, 1506, 1167, 1496, 1149, 1559, 1487, 1495, 1164, 1504, 1180, 1512, 1148, 1239, 1284, 1567, 1300, 1576, 1316, 1584, 1332, 1331, 1330, 1329, 1582, 1311, 1260, 1546, 1244, 1228, 1529, 1212, 1521, 1196, 1294, 1277, 1525]

# heart filled: selection = [1285, 1568, 1303, 1578, 1321, 1339, 1340, 1341, 1342, 1589, 1326, 1309, 1292, 1275, 1553, 1257, 1544, 1534, 1221, 1203, 1515, 1185, 1506, 1167, 1496, 1149, 1559, 1487, 1495, 1164, 1504, 1180, 1512, 1148, 1239, 1284, 1567, 1300, 1576, 1316, 1584, 1332, 1331, 1330, 1329, 1582, 1311, 1260, 1546, 1244, 1228, 1529, 1212, 1521, 1196, 1294, 1277, 1525, 1583, 1312, 1574, 1313, 1564, 1295, 1278, 1261, 1556, 1279, 1296, 1314, 1315, 1575, 1297, 1298, 1280, 1262, 1547, 1538, 1245, 1246, 1263, 1565, 1557, 1281, 1566, 1299, 1282, 1266, 1558, 1265, 1548, 1264, 1539, 1213, 1247, 1229, 1230, 1530, 1231, 1214, 1522, 1197, 1198, 1215, 1232, 1531, 1540, 1549, 1249, 1248, 1283, 1267, 1268, 1250, 1541, 1233, 1234, 1216, 1218, 1217, 1523, 1199, 1513, 1181, 1182, 1505, 1183, 1166, 1165, 1200, 1201, 1514, 1184, 1202, 1220, 1219, 1533, 1235, 1532, 1236, 1237, 1238, 1543, 1254, 1253, 1542, 1252, 1269, 1550, 1286, 1560, 1287, 1304, 1569, 1305, 1579, 1322, 1587, 1323, 1588, 1324, 1580, 1308, 1325, 1571, 1291, 1562, 1274, 1273, 1256, 1552, 1290, 1307, 1570, 1289, 1306, 1288, 1561, 1271, 1270, 1551, 1272, 1255, 1524, 1251]

# JB: selection = [4696, 4695, 1328, 1311, 1582, 1329, 1312, 1313, 1583, 1330, 1331, 1314, 1332, 1315, 1575, 1584, 1316, 1576, 1299, 1298, 1333, 1282, 1281, 1566, 1265, 1264, 1548, 1248, 1247, 1230, 1231, 1530, 1214, 1213, 1197, 1512, 1196, 1179, 1180, 1162, 1163, 1494, 1145, 1485, 1144, 1127, 1143, 1126, 1142, 1484, 1125, 1141, 1492, 1338, 1304, 1287, 1270, 1253, 1236, 1219, 1202, 1185, 1168, 1151, 1135, 1136, 1137, 1138, 1139, 1491, 1157, 1500, 4743, 4745, 4744, 1225, 4746, 1536, 1242, 1545, 1241, 1258, 1257, 1240, 1544, 1326, 1343, 1339, 1322, 1587, 1321, 1324, 1588, 1340, 1323, 1341, 1342, 1589, 1327, 1344, 1325, 1310, 1275, 1553, 1152, 1489, 1154, 1153, 1490, 1155, 1156, 1305, 1569, 1288, 1271, 1551, 1237, 1533, 1220, 1203, 1515, 1186, 1169, 1497, 1543, 1254, 1239, 1238, 1256, 1255, 1563, 1293, 1572, 4751, 4752, 1590, 4832, 4764, 4763, 4829, 4742, 4741, 1140, 4761, 4762, 4750, 1276, 1134, 4747, 4765]

# element: selection = [4698, 4697, 4696, 4695, 4694, 4693, 4692, 4691, 4690, 4689, 4688, 4687, 4686, 4685, 4684, 4683, 4682, 1363, 1362, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1370, 1372, 1373, 1374, 4755, 1378, 1377, 1376, 1375, 4754, 4753, 4751, 4752, 4750, 4749, 4748, 4747, 4746, 4745, 4744, 4743, 4742, 4741, 4740, 4739, 1106, 1105, 1103, 1104, 1091, 1092, 1090, 1093, 1094, 1095, 1096, 1100, 1099, 1097, 1098, 1102, 1101, 1330, 1313, 1331, 1314, 1584, 1332, 1315, 1583, 1333, 1316, 1585, 1317, 1334, 1318, 1335, 1336, 1319, 1342, 1325, 1341, 1324, 1588, 1340, 1323, 1339, 1322, 1587, 1338, 1337, 1321, 1586, 1320, 1262, 1245, 1547, 1211, 1194, 1212, 1195, 1126, 1143, 1144, 1127, 1485, 1145, 1128, 1246, 1263, 1264, 1247, 1548, 1265, 1248, 1266, 1549, 1249, 1250, 1267, 1268, 1251, 1550, 1252, 1269, 1270, 1253, 1213, 1521, 1196, 1214, 1197, 1522, 1198, 1199, 1215, 1216, 1523, 1217, 1200, 1218, 1201, 1524, 1219, 1202, 1146, 1129, 1486, 1147, 1130, 1131, 1148, 1132, 1149, 1487, 1150, 1133, 1488, 1151, 1134, 1152, 1489, 1153, 1135, 1136, 1154, 1137, 1490, 1155, 1138, 1551, 1271, 1254, 1220, 1203]


# sel = getindex.(Ref(KB.frame_to_position), selection)
# #col = [bytes2hex(rand(UInt8, 3)) for _ in eachindex(sel)]
# col = ["FF00FF" for _ in eachindex(sel)]
# @show p = Kilter.packet(sel, col)